# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strong
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/roda/all/roda.rbi
#
# roda-3.20.0
class Roda
  extend Roda::RodaPlugins::Base::ClassMethods
  extend Roda::RodaPlugins::Base::ClassMethods
  include Roda::RodaPlugins::Base::InstanceMethods
end
class Roda::RodaError < StandardError
end
class Roda::RodaCache
  def [](key); end
  def []=(key, value); end
  def initialize; end
  def initialize_copy(other); end
end
class Roda::RodaRequest < Rack::Request
  extend Roda::RodaPlugins::Base::RequestClassMethods
  include Roda::RodaPlugins::Base::RequestMethods
end
class Roda::RodaResponse
  extend Roda::RodaPlugins::Base::ResponseClassMethods
  include Roda::RodaPlugins::Base::ResponseMethods
end
module Roda::RodaPlugins
  def self.deprecate_constant(mod, name); end
  def self.load_plugin(name); end
  def self.register_plugin(name, mod); end
  def self.warn(*arg0); end
end
module Roda::RodaPlugins::Base
end
module Roda::RodaPlugins::Base::ClassMethods
  def _define_roda_method_arg_numbers(callable); end
  def app; end
  def base_rack_app_callable(new_api = nil); end
  def build_rack_app; end
  def call(env); end
  def clear_middleware!; end
  def convert_route_block(block); end
  def def_roda_after; end
  def def_roda_before; end
  def define_roda_method(meth, expected_arity, &block); end
  def expand_path(path, root = nil); end
  def freeze; end
  def include(*a); end
  def inherit_middleware; end
  def inherit_middleware=(arg0); end
  def inherited(subclass); end
  def opts; end
  def plugin(plugin, *args, &block); end
  def rack_app_route_block(block); end
  def roda_method_name(suffix); end
  def route(&block); end
  def route_block; end
  def use(*args, &block); end
  def use_new_dispatch_api?; end
end
module Roda::RodaPlugins::Base::InstanceMethods
  def _call(&block); end
  def _roda_handle_main_route; end
  def _roda_handle_route; end
  def _roda_main_route(_); end
  def _roda_run_main_route(r); end
  def call(&block); end
  def env; end
  def initialize(env); end
  def opts; end
  def request; end
  def response; end
  def session; end
end
module Roda::RodaPlugins::Base::RequestClassMethods
  def cached_matcher(obj); end
  def consume_pattern(pattern); end
  def inspect; end
  def match_pattern_cache; end
  def match_pattern_cache=(arg0); end
  def roda_class; end
  def roda_class=(arg0); end
end
module Roda::RodaPlugins::Base::RequestMethods
  def _match_array(matcher); end
  def _match_class(klass); end
  def _match_class_Integer; end
  def _match_class_String(sym = nil); end
  def _match_hash(hash); end
  def _match_regexp(re); end
  def _match_string(str); end
  def _match_symbol(sym = nil); end
  def _remaining_path(env); end
  def _verb(args, &block); end
  def always; end
  def block_result(result); end
  def block_result_body(result); end
  def captures; end
  def consume(pattern); end
  def default_redirect_path; end
  def default_redirect_status; end
  def empty_path?; end
  def get(*args, &block); end
  def halt(res = nil); end
  def if_match(args); end
  def initialize(scope, env); end
  def inspect; end
  def is(*args, &block); end
  def is_get?; end
  def match(matcher); end
  def match_all(args); end
  def match_method(type); end
  def matched_path; end
  def on(*args, &block); end
  def path; end
  def post(*args, &block); end
  def real_remaining_path; end
  def redirect(path = nil, status = nil); end
  def remaining_path; end
  def response; end
  def roda_class; end
  def root(&block); end
  def run(app); end
  def scope; end
  def session; end
  def unsupported_matcher(matcher); end
end
module Roda::RodaPlugins::Base::ResponseClassMethods
  def inspect; end
  def roda_class; end
  def roda_class=(arg0); end
end
module Roda::RodaPlugins::Base::ResponseMethods
  def [](key); end
  def []=(key, value); end
  def body; end
  def default_headers; end
  def default_status; end
  def empty?; end
  def finish; end
  def finish_with_body(body); end
  def headers; end
  def initialize; end
  def inspect; end
  def redirect(path, status = nil); end
  def roda_class; end
  def set_default_headers; end
  def status; end
  def status=(arg0); end
  def write(str); end
end
